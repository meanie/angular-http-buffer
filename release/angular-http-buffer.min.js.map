{"version":3,"sources":["httpBuffer.service.js"],"names":["angular","$http","config","response","deferred","reject","reason","promise","clear","rejectAll","retryAll","configUpdater"],"mappings":"iBAKAA,uDAWMC,eAAAA,KAAAA,YAAAA,SAAAA,EAAAA,YAWIC,EAAaA,EAASC,MAG1BC,GAASC,EAAOC,IAAAA,8FAkBhB,SAAgBC,mBAMlBC,qCAAOJ,EAAAG,0BAOPE,+EAcAC,KAAAA,kBAMQC,SAAiBX","file":"angular-http-buffer.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('HttpBuffer.Service', [])\n\n/**\n * Service definition\n */\n.factory('$httpBuffer', function($q, $injector) {\n\n  //Requests buffer\n  var buffer = [];\n\n  //HTTP service, initialized later due to circular dependency\n  var $http;\n\n  /**\n   * Helper to retry a http request\n   */\n  function retryHttpRequest(config, deferred) {\n\n    //Get the http service now\n    $http = $http || $injector.get('$http');\n\n    //Retry the request\n    $http(config).then(function(response) {\n      deferred.resolve(response);\n    }, function(reason) {\n      deferred.reject(reason);\n    });\n  }\n\n  /**\n   * Service class\n   */\n  return {\n\n    /**\n     * Store a new request in the buffer\n     */\n    store: function(config) {\n      var deferred = $q.defer();\n      buffer.push({\n        config: config,\n        deferred: deferred\n      });\n      return deferred.promise;\n    },\n\n    /**\n     * Clear the buffer (without rejecting requests)\n     */\n    clear: function() {\n      buffer = [];\n    },\n\n    /**\n     * Reject all the buffered requests\n     */\n    rejectAll: function(reason) {\n\n      //Loop all buffered requests and reject them\n      for (var i = 0; i < buffer.length; i++) {\n        buffer[i].deferred.reject(reason);\n      }\n\n      //Clear the buffer\n      this.clear();\n    },\n\n    /**\n     * Retry all buffered requests\n     */\n    retryAll: function(configUpdater) {\n\n      //Loop all buffered requests\n      for (var i = 0; i < buffer.length; i++) {\n\n        //Config updater provided? Use it\n        if (configUpdater && angular.isFunction(configUpdater)) {\n          buffer[i].config = configUpdater(buffer[i].config);\n        }\n\n        //Retry the request\n        retryHttpRequest(buffer[i].config, buffer[i].deferred);\n      }\n\n      //Clear the buffer\n      this.clear();\n    }\n  };\n});\n\n})(window, window.angular);\n"]}